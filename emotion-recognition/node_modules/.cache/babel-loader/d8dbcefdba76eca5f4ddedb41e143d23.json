{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\atiqu\\\\OneDrive\\\\Desktop\\\\project_faceDetection\\\\emotion-recognition\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n// import React, { useRef, useEffect } from \"react\";\n// import \"./App.css\";\n// import logo from './logo.svg';\n// import * as tf from \"@tensorflow/tfjs\";\n// import Webcam from \"react-webcam\";\n// import { drawMesh } from \"./utilities\";\n// function App() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const blazeface = require('@tensorflow-models/blazeface')\n//   //  Load blazeface\n//   const runFaceDetectorModel = async () => {\n//     const model = await blazeface.load()\n//     console.log(\"FaceDetection Model is Loaded..\") \n//     setInterval(() => {\n//       detect(model);\n//     }, 100);\n//   }\n//   const detect = async (net) => {\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null &&\n//       webcamRef.current.video.readyState === 4\n//     ) {\n//       // Get Video Properties\n//       const video = webcamRef.current.video;\n//       const videoWidth = webcamRef.current.video.videoWidth;\n//       const videoHeight = webcamRef.current.video.videoHeight;\n//       // Set video width\n//       webcamRef.current.video.width = videoWidth;\n//       webcamRef.current.video.height = videoHeight;\n//       // Set canvas width\n//       canvasRef.current.width = videoWidth;\n//       canvasRef.current.height = videoHeight;\n//       // Make Detections\n//       const face = await net.estimateFaces(video);\n//       //console.log(face);\n//       // Websocket\n//       var socket = new WebSocket('ws://localhost:8000')\n//       var imageSrc = webcamRef.current.getScreenshot()\n//       var apiCall = {\n//         event: \"localhost:subscribe\",\n//         data: { \n//           image: imageSrc\n//         },\n//       };\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall))\n//       socket.onmessage = function(event) {\n//         var pred_log = JSON.parse(event.data)\n//         document.getElementById(\"Angry\").value = Math.round(pred_log['predictions']['angry']*100)\n//         document.getElementById(\"Neutral\").value = Math.round(pred_log['predictions']['neutral']*100)\n//         document.getElementById(\"Happy\").value = Math.round(pred_log['predictions']['happy']*100)\n//         document.getElementById(\"Fear\").value = Math.round(pred_log['predictions']['fear']*100)\n//         document.getElementById(\"Surprise\").value = Math.round(pred_log['predictions']['surprise']*100)\n//         document.getElementById(\"Sad\").value = Math.round(pred_log['predictions']['sad']*100)\n//         document.getElementById(\"Disgust\").value = Math.round(pred_log['predictions']['disgust']*100)\n//         document.getElementById(\"emotion_text\").value = pred_log['emotion']\n//         // Get canvas context\n//         const ctx = canvasRef.current.getContext(\"2d\");\n//         requestAnimationFrame(()=>{drawMesh(face, pred_log, ctx)});\n//       }\n//     }\n//   };\n//   useEffect(()=>{runFaceDetectorModel()}, []);\n//   return (\n//     <div className=\"App\">\n//       <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 600,\n//             top:20,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />\n//         <canvas\n//           ref={canvasRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 600,\n//             top:20,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />\n//       <header className=\"App-header\">\n//         <img src={logo} \n//         className=\"App-logo\" \n//         alt=\"logo\"\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           bottom:10,\n//           left: 0,\n//           right: 0,\n//           width: 150,\n//           height: 150,\n//         }}\n//         />   \n//         <div className=\"Prediction\" style={{\n//           position:\"absolute\",\n//           right:100,\n//           width:500,\n//           top: 60\n//         }}>\n//           <label forhtml=\"Angry\" style={{color:'red'}}>Angry </label>\n//           <progress id=\"Angry\" value=\"0\" max = \"100\" >10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Neutral\" style={{color:'lightgreen'}}>Neutral </label>\n//           <progress id=\"Neutral\" value=\"0\" max = \"100\">10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Happy\" style={{color:'orange'}}>Happy </label>\n//           <progress id=\"Happy\" value=\"0\" max = \"100\" >10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Fear\" style={{color:'lightblue'}}>Fear </label>\n//           <progress id=\"Fear\" value=\"0\" max = \"100\" >10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Surprise\" style={{color:'yellow'}}>Surprised </label>\n//           <progress id=\"Surprise\" value=\"0\" max = \"100\" >10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Sad\" style={{color:'gray'}} >Sad </label>\n//           <progress id=\"Sad\" value=\"0\" max = \"100\" >10%</progress>\n//           <br></br>\n//           <br></br>\n//           <label forhtml=\"Disgust\" style={{color:'pink'}} >Disgusted </label>\n//           <progress id=\"Disgust\" value=\"0\" max = \"100\" >10%</progress>\n//         </div>\n//         <input id=\"emotion_text\" name=\"emotion_text\" vale=\"Neutral\"\n//                style={{\n//                  position:\"absolute\",\n//                  width:200,\n//                  height:50,\n//                  bottom:60,\n//                  left:300,\n//                  \"font-size\": \"30px\",\n//                }}></input>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n// option one \n// import React, { useRef, useEffect } from \"react\";\n// import \"./App.css\";\n// import Webcam from \"react-webcam\";\n// function App() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const detect = async () => {\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null &&\n//       webcamRef.current.video.readyState === 4\n//     ) {\n//       // Capture the current frame from the webcam\n//       const video = webcamRef.current.video;\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Websocket\n//       var socket = new WebSocket(\"ws://localhost:8000\");\n//       var apiCall = {\n//         event: \"localhost:subscribe\",\n//         data: { image: imageSrc },\n//       };\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\n//       socket.onmessage = function (event) {\n//         var pred_log = JSON.parse(event.data);\n//         if (!pred_log.error) {\n//           document.getElementById(\"Angry\").value = Math.round(\n//             pred_log[\"predictions\"][\"Angry\"] * 100\n//           );\n//           document.getElementById(\"Neutral\").value = Math.round(\n//             pred_log[\"predictions\"][\"Neutral\"] * 100\n//           );\n//           document.getElementById(\"Happy\").value = Math.round(\n//             pred_log[\"predictions\"][\"Happy\"] * 100\n//           );\n//           document.getElementById(\"Fear\").value = Math.round(\n//             pred_log[\"predictions\"][\"Fear\"] * 100\n//           );\n//           document.getElementById(\"Surprise\").value = Math.round(\n//             pred_log[\"predictions\"][\"Surprise\"] * 100\n//           );\n//           document.getElementById(\"Sad\").value = Math.round(\n//             pred_log[\"predictions\"][\"Sad\"] * 100\n//           );\n//           document.getElementById(\"Disgust\").value = Math.round(\n//             pred_log[\"predictions\"][\"Disgust\"] * 100\n//           );\n//           document.getElementById(\"emotion_text\").value = pred_log[\"emotion\"];\n//         }\n//       };\n//     }\n//   };\n//   useEffect(() => {\n//     setInterval(detect, 1000); // Detect emotions every second\n//   }, []);\n//   return (\n//     <div className=\"App\">\n//       <Webcam\n//         ref={webcamRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <canvas\n//         ref={canvasRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\n//         <label htmlFor=\"Angry\" style={{ color: \"red\" }}>Angry </label>\n//         <progress id=\"Angry\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Neutral\" style={{ color: \"lightgreen\" }}>Neutral </label>\n//         <progress id=\"Neutral\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Happy\" style={{ color: \"orange\" }}>Happy </label>\n//         <progress id=\"Happy\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Fear\" style={{ color: \"lightblue\" }}>Fear </label>\n//         <progress id=\"Fear\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Surprise\" style={{ color: \"yellow\" }}>Surprise </label>\n//         <progress id=\"Surprise\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Sad\" style={{ color: \"gray\" }}>Sad </label>\n//         <progress id=\"Sad\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Disgust\" style={{ color: \"pink\" }}>Disgust </label>\n//         <progress id=\"Disgust\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <input id=\"emotion_text\" name=\"emotion_text\" value=\"Neutral\" style={{ width: 200, height: 50, fontSize: \"30px\" }} />\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n// option two \nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\n  const [finalPercentage, setFinalPercentage] = useState(0);\n\n  const detect = async () => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Capture the current frame from the webcam\n      const video = webcamRef.current.video;\n      const imageSrc = webcamRef.current.getScreenshot(); // Websocket\n\n      var socket = new WebSocket(\"ws://localhost:8000\");\n      var apiCall = {\n        event: \"localhost:subscribe\",\n        data: {\n          image: imageSrc\n        }\n      };\n\n      socket.onopen = () => socket.send(JSON.stringify(apiCall));\n\n      socket.onmessage = function (event) {\n        var pred_log = JSON.parse(event.data);\n\n        if (!pred_log.error) {\n          // Extract emotions and predictions\n          const predictions = pred_log[\"predictions\"];\n          const emotions = Object.keys(predictions);\n          const values = emotions.map(emotion => predictions[emotion] * 100); // Find the highest emotion\n\n          const maxIndex = values.indexOf(Math.max(...values));\n          const emotion = emotions[maxIndex];\n          const percentage = Math.round(values[maxIndex]); // Set the final emotion and percentage\n\n          setFinalEmotion(emotion);\n          setFinalPercentage(percentage);\n        }\n      };\n    }\n  };\n\n  useEffect(() => {\n    const interval = setInterval(detect, 1000); // Detect emotions every second\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 600,\n        top: 20,\n        textAlign: \"center\",\n        zIndex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Prediction\",\n      style: {\n        position: \"absolute\",\n        right: 100,\n        width: 500,\n        top: 60\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"finalEmotionProgress\",\n        style: {\n          color: \"black\"\n        },\n        children: [\"Emotion : \", finalEmotion, \" (\", finalPercentage, \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n        id: \"finalEmotionProgress\",\n        value: finalPercentage,\n        max: \"100\",\n        children: [finalPercentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"emotion_text\",\n        name: \"emotion_text\",\n        value: finalEmotion,\n        style: {\n          width: 200,\n          height: 50,\n          fontSize: \"30px\",\n          textAlign: \"center\"\n        },\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lciAw2V9bU6T0oBm+hiprUO8554=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/atiqu/OneDrive/Desktop/project_faceDetection/emotion-recognition/src/App.js"],"names":["React","useRef","useEffect","useState","Webcam","App","webcamRef","finalEmotion","setFinalEmotion","finalPercentage","setFinalPercentage","detect","current","video","readyState","imageSrc","getScreenshot","socket","WebSocket","apiCall","event","data","image","onopen","send","JSON","stringify","onmessage","pred_log","parse","error","predictions","emotions","Object","keys","values","map","emotion","maxIndex","indexOf","Math","max","percentage","round","interval","setInterval","clearInterval","position","marginLeft","marginRight","left","right","top","textAlign","zIndex","width","height","color","fontSize"],"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","sourcesContent":["// import React, { useRef, useEffect } from \"react\";\r\n// import \"./App.css\";\r\n// import logo from './logo.svg';\r\n\r\n// import * as tf from \"@tensorflow/tfjs\";\r\n// import Webcam from \"react-webcam\";\r\n// import { drawMesh } from \"./utilities\";\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const blazeface = require('@tensorflow-models/blazeface')\r\n\r\n//   //  Load blazeface\r\n//   const runFaceDetectorModel = async () => {\r\n\r\n//     const model = await blazeface.load()\r\n//     console.log(\"FaceDetection Model is Loaded..\") \r\n//     setInterval(() => {\r\n//       detect(model);\r\n//     }, 100);\r\n \r\n//   }\r\n\r\n//   const detect = async (net) => {\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Get Video Properties\r\n//       const video = webcamRef.current.video;\r\n//       const videoWidth = webcamRef.current.video.videoWidth;\r\n//       const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n//       // Set video width\r\n//       webcamRef.current.video.width = videoWidth;\r\n//       webcamRef.current.video.height = videoHeight;\r\n\r\n//       // Set canvas width\r\n//       canvasRef.current.width = videoWidth;\r\n//       canvasRef.current.height = videoHeight;\r\n\r\n//       // Make Detections\r\n//       const face = await net.estimateFaces(video);\r\n//       //console.log(face);\r\n\r\n//       // Websocket\r\n//       var socket = new WebSocket('ws://localhost:8000')\r\n//       var imageSrc = webcamRef.current.getScreenshot()\r\n//       var apiCall = {\r\n//         event: \"localhost:subscribe\",\r\n//         data: { \r\n//           image: imageSrc\r\n//         },\r\n//       };\r\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall))\r\n//       socket.onmessage = function(event) {\r\n//         var pred_log = JSON.parse(event.data)\r\n//         document.getElementById(\"Angry\").value = Math.round(pred_log['predictions']['angry']*100)\r\n//         document.getElementById(\"Neutral\").value = Math.round(pred_log['predictions']['neutral']*100)\r\n//         document.getElementById(\"Happy\").value = Math.round(pred_log['predictions']['happy']*100)\r\n//         document.getElementById(\"Fear\").value = Math.round(pred_log['predictions']['fear']*100)\r\n//         document.getElementById(\"Surprise\").value = Math.round(pred_log['predictions']['surprise']*100)\r\n//         document.getElementById(\"Sad\").value = Math.round(pred_log['predictions']['sad']*100)\r\n//         document.getElementById(\"Disgust\").value = Math.round(pred_log['predictions']['disgust']*100)\r\n\r\n//         document.getElementById(\"emotion_text\").value = pred_log['emotion']\r\n\r\n//         // Get canvas context\r\n//         const ctx = canvasRef.current.getContext(\"2d\");\r\n//         requestAnimationFrame(()=>{drawMesh(face, pred_log, ctx)});\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(()=>{runFaceDetectorModel()}, []);\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Webcam\r\n//           ref={webcamRef}\r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n//             left: 0,\r\n//             right: 600,\r\n//             top:20,\r\n//             textAlign: \"center\",\r\n//             zindex: 9,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n\r\n//         <canvas\r\n//           ref={canvasRef}\r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n//             left: 0,\r\n//             right: 600,\r\n//             top:20,\r\n//             textAlign: \"center\",\r\n//             zindex: 9,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} \r\n//         className=\"App-logo\" \r\n//         alt=\"logo\"\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           bottom:10,\r\n//           left: 0,\r\n//           right: 0,\r\n//           width: 150,\r\n//           height: 150,\r\n//         }}\r\n//         />   \r\n//         <div className=\"Prediction\" style={{\r\n//           position:\"absolute\",\r\n//           right:100,\r\n//           width:500,\r\n//           top: 60\r\n//         }}>\r\n//           <label forhtml=\"Angry\" style={{color:'red'}}>Angry </label>\r\n//           <progress id=\"Angry\" value=\"0\" max = \"100\" >10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Neutral\" style={{color:'lightgreen'}}>Neutral </label>\r\n//           <progress id=\"Neutral\" value=\"0\" max = \"100\">10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Happy\" style={{color:'orange'}}>Happy </label>\r\n//           <progress id=\"Happy\" value=\"0\" max = \"100\" >10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Fear\" style={{color:'lightblue'}}>Fear </label>\r\n//           <progress id=\"Fear\" value=\"0\" max = \"100\" >10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Surprise\" style={{color:'yellow'}}>Surprised </label>\r\n//           <progress id=\"Surprise\" value=\"0\" max = \"100\" >10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Sad\" style={{color:'gray'}} >Sad </label>\r\n//           <progress id=\"Sad\" value=\"0\" max = \"100\" >10%</progress>\r\n//           <br></br>\r\n//           <br></br>\r\n//           <label forhtml=\"Disgust\" style={{color:'pink'}} >Disgusted </label>\r\n//           <progress id=\"Disgust\" value=\"0\" max = \"100\" >10%</progress>\r\n//         </div>\r\n//         <input id=\"emotion_text\" name=\"emotion_text\" vale=\"Neutral\"\r\n//                style={{\r\n//                  position:\"absolute\",\r\n//                  width:200,\r\n//                  height:50,\r\n//                  bottom:60,\r\n//                  left:300,\r\n//                  \"font-size\": \"30px\",\r\n//                }}></input>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// option one \r\n\r\n\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import \"./App.css\";\r\n// import Webcam from \"react-webcam\";\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n\r\n//   const detect = async () => {\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Capture the current frame from the webcam\r\n//       const video = webcamRef.current.video;\r\n//       const imageSrc = webcamRef.current.getScreenshot();\r\n\r\n//       // Websocket\r\n//       var socket = new WebSocket(\"ws://localhost:8000\");\r\n//       var apiCall = {\r\n//         event: \"localhost:subscribe\",\r\n//         data: { image: imageSrc },\r\n//       };\r\n\r\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n//       socket.onmessage = function (event) {\r\n//         var pred_log = JSON.parse(event.data);\r\n//         if (!pred_log.error) {\r\n//           document.getElementById(\"Angry\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Angry\"] * 100\r\n//           );\r\n//           document.getElementById(\"Neutral\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Neutral\"] * 100\r\n//           );\r\n//           document.getElementById(\"Happy\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Happy\"] * 100\r\n//           );\r\n//           document.getElementById(\"Fear\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Fear\"] * 100\r\n//           );\r\n//           document.getElementById(\"Surprise\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Surprise\"] * 100\r\n//           );\r\n//           document.getElementById(\"Sad\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Sad\"] * 100\r\n//           );\r\n//           document.getElementById(\"Disgust\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Disgust\"] * 100\r\n//           );\r\n\r\n//           document.getElementById(\"emotion_text\").value = pred_log[\"emotion\"];\r\n//         }\r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setInterval(detect, 1000); // Detect emotions every second\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Webcam\r\n//         ref={webcamRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n\r\n//       <canvas\r\n//         ref={canvasRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n//         <label htmlFor=\"Angry\" style={{ color: \"red\" }}>Angry </label>\r\n//         <progress id=\"Angry\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Neutral\" style={{ color: \"lightgreen\" }}>Neutral </label>\r\n//         <progress id=\"Neutral\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Happy\" style={{ color: \"orange\" }}>Happy </label>\r\n//         <progress id=\"Happy\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Fear\" style={{ color: \"lightblue\" }}>Fear </label>\r\n//         <progress id=\"Fear\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Surprise\" style={{ color: \"yellow\" }}>Surprise </label>\r\n//         <progress id=\"Surprise\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Sad\" style={{ color: \"gray\" }}>Sad </label>\r\n//         <progress id=\"Sad\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Disgust\" style={{ color: \"pink\" }}>Disgust </label>\r\n//         <progress id=\"Disgust\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <input id=\"emotion_text\" name=\"emotion_text\" value=\"Neutral\" style={{ width: 200, height: 50, fontSize: \"30px\" }} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// option two \r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\r\n  const [finalPercentage, setFinalPercentage] = useState(0);\r\n\r\n  const detect = async () => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Capture the current frame from the webcam\r\n      const video = webcamRef.current.video;\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n\r\n      // Websocket\r\n      var socket = new WebSocket(\"ws://localhost:8000\");\r\n      var apiCall = {\r\n        event: \"localhost:subscribe\",\r\n        data: { image: imageSrc },\r\n      };\r\n\r\n      socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n      socket.onmessage = function (event) {\r\n        var pred_log = JSON.parse(event.data);\r\n        if (!pred_log.error) {\r\n          // Extract emotions and predictions\r\n          const predictions = pred_log[\"predictions\"];\r\n          const emotions = Object.keys(predictions);\r\n          const values = emotions.map(emotion => predictions[emotion] * 100);\r\n\r\n          // Find the highest emotion\r\n          const maxIndex = values.indexOf(Math.max(...values));\r\n          const emotion = emotions[maxIndex];\r\n          const percentage = Math.round(values[maxIndex]);\r\n\r\n          // Set the final emotion and percentage\r\n          setFinalEmotion(emotion);\r\n          setFinalPercentage(percentage);\r\n        }\r\n      };\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(detect, 1000); // Detect emotions every second\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Webcam\r\n        ref={webcamRef}\r\n        style={{\r\n          position: \"absolute\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          left: 0,\r\n          right: 600,\r\n          top: 20,\r\n          textAlign: \"center\",\r\n          zIndex: 9,\r\n          width: 640,\r\n          height: 480,\r\n        }}\r\n      />\r\n\r\n      <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n        <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\r\n           Emotion : {finalEmotion} ({finalPercentage}%)\r\n        </label>\r\n        <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\r\n          {finalPercentage}%\r\n        </progress>\r\n        <br /><br />\r\n\r\n        <input\r\n          id=\"emotion_text\"\r\n          name=\"emotion_text\"\r\n          value={finalEmotion}\r\n          style={{\r\n            width: 200,\r\n            height: 50,\r\n            fontSize: \"30px\",\r\n            textAlign: \"center\",\r\n          }}\r\n          readOnly\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}