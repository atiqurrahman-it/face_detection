{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\atiqu\\\\OneDrive\\\\Desktop\\\\project_faceDetection\\\\emotion-recognition\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\n  const [finalPercentage, setFinalPercentage] = useState(0);\n  const [currentPage, setCurrentPage] = useState(\"home\"); // Manage the current section\n\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  const detect = async () => {\n    if (currentPage === \"face-detection\" && typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      const imageSrc = webcamRef.current.getScreenshot();\n      sendImageToServer(imageSrc);\n    }\n  };\n\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n\n    reader.onloadend = () => {\n      const base64Image = reader.result;\n      sendImageToServer(base64Image);\n      setSelectedImage(base64Image); // Display the uploaded image\n    };\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }; // const sendImageToServer = (imageSrc) => {\n  //   const socket = new WebSocket(\"ws://localhost:8000\");\n  //   const apiCall = {\n  //     event: \"localhost:subscribe\",\n  //     data: { image: imageSrc },\n  //   };\n  //   socket.onopen = () => socket.send(JSON.stringify(apiCall));\n  //   socket.onmessage = (event) => {\n  //     const pred_log = JSON.parse(event.data);\n  //     if (!pred_log.error) {\n  //       const predictions = pred_log[\"predictions\"];\n  //       const emotions = Object.keys(predictions);\n  //       const values = emotions.map((emotion) => predictions[emotion] * 100);\n  //       const maxIndex = values.indexOf(Math.max(...values));\n  //       const emotion = emotions[maxIndex];\n  //       const percentage = Math.round(values[maxIndex]);\n  //       setFinalEmotion(emotion);\n  //       setFinalPercentage(percentage);\n  //     }\n  //   };\n  // };\n\n\n  const sendImageToServer = imageSrc => {\n    const socket = new WebSocket(\"ws://localhost:8000\");\n    const apiCall = {\n      event: \"localhost:subscribe\",\n      data: {\n        image: imageSrc\n      }\n    };\n\n    socket.onopen = () => {\n      console.log(\"WebSocket connection opened. Sending image data...\");\n      socket.send(JSON.stringify(apiCall));\n    };\n\n    socket.onmessage = event => {\n      console.log(\"Message received from server:\", event.data);\n      const pred_log = JSON.parse(event.data);\n\n      if (!pred_log.error) {\n        const predictions = pred_log[\"predictions\"];\n        const emotions = Object.keys(predictions);\n        const values = emotions.map(emotion => predictions[emotion] * 100);\n        const maxIndex = values.indexOf(Math.max(...values));\n        const emotion = emotions[maxIndex];\n        const percentage = Math.round(values[maxIndex]);\n        setFinalEmotion(emotion);\n        setFinalPercentage(percentage);\n      }\n    };\n\n    socket.onerror = error => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    socket.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n  };\n\n  useEffect(() => {\n    const interval = setInterval(detect, 1000); // Detect emotions every second\n\n    return () => clearInterval(interval);\n  }, [currentPage]); // Reset emotion result when switching to \"input-image\"\n\n  const handleNavClick = page => {\n    setCurrentPage(page);\n\n    if (page === \"input-image\") {\n      setFinalEmotion(\"None\"); // Reset emotion to \"None\"\n\n      setFinalPercentage(0); // Reset percentage to 0\n\n      setSelectedImage(null); // Clear previously selected image\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleNavClick(\"home\"),\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleNavClick(\"face-detection\"),\n        children: \"Face Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleNavClick(\"input-image\"),\n        children: \"Input Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), currentPage === \"home\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"95vh\",\n        width: \"95vw\",\n        fontSize: \"30px\" // Adjust the font size as needed\n\n      },\n      children: \"Welcome to the Emotion Detection App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 34\n    }, this), currentPage === \"face-detection\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 600,\n          top: 20,\n          textAlign: \"center\",\n          zIndex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Prediction\",\n        style: {\n          position: \"absolute\",\n          right: 100,\n          width: 500,\n          top: 60\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"finalEmotionProgress\",\n          style: {\n            color: \"black\"\n          },\n          children: [\"Emotion : \", finalEmotion, \" (\", finalPercentage, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"finalEmotionProgress\",\n          value: finalPercentage,\n          max: \"100\",\n          children: [finalPercentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"emotion_text\",\n          name: \"emotion_text\",\n          value: finalEmotion,\n          style: {\n            width: 200,\n            height: 50,\n            fontSize: \"30px\",\n            textAlign: \"center\"\n          },\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), currentPage === \"input-image\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        marginTop: 50\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          padding: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 66\n          }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedImage,\n            alt: \"Uploaded\",\n            style: {\n              width: 300,\n              marginTop: 20\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Prediction\",\n          style: {\n            marginTop: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"finalEmotionProgress\",\n            style: {\n              color: \"black\"\n            },\n            children: [\"Emotion : \", finalEmotion, \" (\", finalPercentage, \"%)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n            id: \"finalEmotionProgress\",\n            value: finalPercentage,\n            max: \"100\",\n            children: [finalPercentage, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"emotion_text\",\n            name: \"emotion_text\",\n            value: finalEmotion,\n            style: {\n              width: 200,\n              height: 50,\n              fontSize: \"30px\",\n              textAlign: \"center\"\n            },\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"oJ+o7zbTZgrVk62ZGykIIK1SzEk=\");\n\n_c = App;\nexport default App; // option two \n// import React, { useRef, useEffect, useState } from \"react\";\n// import \"./App.css\";\n// import Webcam from \"react-webcam\";\n// function App() {\n//   const webcamRef = useRef(null);\n//   const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\n//   const [finalPercentage, setFinalPercentage] = useState(0);\n//   const detect = async () => {\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null &&\n//       webcamRef.current.video.readyState === 4\n//     ) {\n//       // Capture the current frame from the webcam\n//       const video = webcamRef.current.video;\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Websocket\n//       var socket = new WebSocket(\"ws://localhost:8000\");\n//       var apiCall = {\n//         event: \"localhost:subscribe\",\n//         data: { image: imageSrc },\n//       };\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\n//       socket.onmessage = function (event) {\n//         var pred_log = JSON.parse(event.data);\n//         if (!pred_log.error) {\n//           // Extract emotions and predictions\n//           const predictions = pred_log[\"predictions\"];\n//           const emotions = Object.keys(predictions);\n//           const values = emotions.map(emotion => predictions[emotion] * 100);\n//           // Find the highest emotion\n//           const maxIndex = values.indexOf(Math.max(...values));\n//           const emotion = emotions[maxIndex];\n//           const percentage = Math.round(values[maxIndex]);\n//           // Set the final emotion and percentage\n//           setFinalEmotion(emotion);\n//           setFinalPercentage(percentage);\n//         }\n//       };\n//     }\n//   };\n//   useEffect(() => {\n//     const interval = setInterval(detect, 1000); // Detect emotions every second\n//     return () => clearInterval(interval);\n//   }, []);\n//   return (\n//     <div className=\"App\">\n//       <Webcam\n//         ref={webcamRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\n//         <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\n//            Emotion : {finalEmotion} ({finalPercentage}%)\n//         </label>\n//         <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\n//           {finalPercentage}%\n//         </progress>\n//         <br /><br />\n//         <input\n//           id=\"emotion_text\"\n//           name=\"emotion_text\"\n//           value={finalEmotion}\n//           style={{\n//             width: 200,\n//             height: 50,\n//             fontSize: \"30px\",\n//             textAlign: \"center\",\n//           }}\n//           readOnly\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/atiqu/OneDrive/Desktop/project_faceDetection/emotion-recognition/src/App.js"],"names":["React","useRef","useEffect","useState","Webcam","App","webcamRef","finalEmotion","setFinalEmotion","finalPercentage","setFinalPercentage","currentPage","setCurrentPage","selectedImage","setSelectedImage","detect","current","video","readyState","imageSrc","getScreenshot","sendImageToServer","handleImageUpload","event","file","target","files","reader","FileReader","onloadend","base64Image","result","readAsDataURL","socket","WebSocket","apiCall","data","image","onopen","console","log","send","JSON","stringify","onmessage","pred_log","parse","error","predictions","emotions","Object","keys","values","map","emotion","maxIndex","indexOf","Math","max","percentage","round","onerror","onclose","interval","setInterval","clearInterval","handleNavClick","page","display","justifyContent","alignItems","height","width","fontSize","position","marginLeft","marginRight","left","right","top","textAlign","zIndex","color","marginTop","padding"],"mappings":"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;AACLiE,cAAAA,KAAK,EAAE,GADF;AAELD,cAAAA,MAAM,EAAE,EAFH;AAGLE,cAAAA,QAAQ,EAAE,MAHL;AAILO,cAAAA,SAAS,EAAE;AAJN,aAJT;AAUE,YAAA,QAAQ;AAVV;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YA/DJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsGD;;GAtNQ3E,G;;KAAAA,G;AAwNT,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\r\n  const [finalPercentage, setFinalPercentage] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(\"home\"); // Manage the current section\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  const detect = async () => {\r\n    if (\r\n      currentPage === \"face-detection\" &&\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      sendImageToServer(imageSrc);\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = () => {\r\n      const base64Image = reader.result;\r\n      sendImageToServer(base64Image);\r\n      setSelectedImage(base64Image); // Display the uploaded image\r\n    };\r\n\r\n    if (file) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  // const sendImageToServer = (imageSrc) => {\r\n  //   const socket = new WebSocket(\"ws://localhost:8000\");\r\n  //   const apiCall = {\r\n  //     event: \"localhost:subscribe\",\r\n  //     data: { image: imageSrc },\r\n  //   };\r\n\r\n  //   socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n  //   socket.onmessage = (event) => {\r\n  //     const pred_log = JSON.parse(event.data);\r\n  //     if (!pred_log.error) {\r\n  //       const predictions = pred_log[\"predictions\"];\r\n  //       const emotions = Object.keys(predictions);\r\n  //       const values = emotions.map((emotion) => predictions[emotion] * 100);\r\n\r\n  //       const maxIndex = values.indexOf(Math.max(...values));\r\n  //       const emotion = emotions[maxIndex];\r\n  //       const percentage = Math.round(values[maxIndex]);\r\n\r\n  //       setFinalEmotion(emotion);\r\n  //       setFinalPercentage(percentage);\r\n  //     }\r\n  //   };\r\n  // };\r\n  const sendImageToServer = (imageSrc) => {\r\n    const socket = new WebSocket(\"ws://localhost:8000\");\r\n    const apiCall = {\r\n      event: \"localhost:subscribe\",\r\n      data: { image: imageSrc },\r\n    };\r\n  \r\n    socket.onopen = () => {\r\n      console.log(\"WebSocket connection opened. Sending image data...\");\r\n      socket.send(JSON.stringify(apiCall));\r\n    };\r\n  \r\n    socket.onmessage = (event) => {\r\n      console.log(\"Message received from server:\", event.data);\r\n      const pred_log = JSON.parse(event.data);\r\n      if (!pred_log.error) {\r\n        const predictions = pred_log[\"predictions\"];\r\n        const emotions = Object.keys(predictions);\r\n        const values = emotions.map((emotion) => predictions[emotion] * 100);\r\n  \r\n        const maxIndex = values.indexOf(Math.max(...values));\r\n        const emotion = emotions[maxIndex];\r\n        const percentage = Math.round(values[maxIndex]);\r\n  \r\n        setFinalEmotion(emotion);\r\n        setFinalPercentage(percentage);\r\n      }\r\n    };\r\n  \r\n    socket.onerror = (error) => {\r\n      console.error(\"WebSocket error:\", error);\r\n    };\r\n  \r\n    socket.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n    };\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(detect, 1000); // Detect emotions every second\r\n    return () => clearInterval(interval);\r\n  }, [currentPage]);\r\n\r\n  // Reset emotion result when switching to \"input-image\"\r\n  const handleNavClick = (page) => {\r\n    setCurrentPage(page);\r\n    if (page === \"input-image\") {\r\n      setFinalEmotion(\"None\");  // Reset emotion to \"None\"\r\n      setFinalPercentage(0);    // Reset percentage to 0\r\n      setSelectedImage(null);   // Clear previously selected image\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Navbar */}\r\n      <nav>\r\n        <button onClick={() => handleNavClick(\"home\")}>Home</button>\r\n        <button onClick={() => handleNavClick(\"face-detection\")}>Face Detection</button>\r\n        <button onClick={() => handleNavClick(\"input-image\")}>Input Image</button>\r\n      </nav>\r\n\r\n      {currentPage === \"home\" && <div style={{\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"95vh\",\r\n    width: \"95vw\",\r\n    fontSize: \"30px\", // Adjust the font size as needed\r\n  }}>Welcome to the Emotion Detection App</div>}\r\n\r\n      {/* Face Detection */}\r\n      {currentPage === \"face-detection\" && (\r\n        <>\r\n          <Webcam\r\n            ref={webcamRef}\r\n            style={{\r\n              position: \"absolute\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              left: 0,\r\n              right: 600,\r\n              top: 20,\r\n              textAlign: \"center\",\r\n              zIndex: 9,\r\n              width: 640,\r\n              height: 480,\r\n            }}\r\n          />\r\n\r\n          <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n            <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\r\n              Emotion : {finalEmotion} ({finalPercentage}%)\r\n            </label>\r\n            <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\r\n              {finalPercentage}%\r\n            </progress>\r\n            <br /><br />\r\n\r\n            <input\r\n              id=\"emotion_text\"\r\n              name=\"emotion_text\"\r\n              value={finalEmotion}\r\n              style={{\r\n                width: 200,\r\n                height: 50,\r\n                fontSize: \"30px\",\r\n                textAlign: \"center\",\r\n              }}\r\n              readOnly\r\n            />\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Input Image */}\r\n      {currentPage === \"input-image\" && (\r\n        <div style={{ textAlign: \"center\", marginTop: 50 }}>\r\n\r\n\r\n          <div style={{ display: \"flex\", justifyContent: \"space-around\", alignItems:\"center\", padding: 20 }}>\r\n            <div>\r\n              <input type=\"file\" onChange={handleImageUpload} /> <br/>\r\n              {selectedImage && <img src={selectedImage} alt=\"Uploaded\" style={{ width: 300, marginTop: 20 }} />}\r\n            </div>\r\n            \r\n              <div className=\"Prediction\" style={{ marginTop: 20 }}>\r\n                <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\r\n                  Emotion : {finalEmotion} ({finalPercentage}%)\r\n                </label> <br></br>\r\n                <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\r\n                  {finalPercentage}%\r\n                </progress>\r\n                <br /><br />\r\n\r\n                <input\r\n                  id=\"emotion_text\"\r\n                  name=\"emotion_text\"\r\n                  value={finalEmotion}\r\n                  style={{\r\n                    width: 200,\r\n                    height: 50,\r\n                    fontSize: \"30px\",\r\n                    textAlign: \"center\",\r\n                  }}\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n          </div>\r\n         \r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// option two \r\n// import React, { useRef, useEffect, useState } from \"react\";\r\n// import \"./App.css\";\r\n// import Webcam from \"react-webcam\";\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\r\n//   const [finalPercentage, setFinalPercentage] = useState(0);\r\n\r\n//   const detect = async () => {\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Capture the current frame from the webcam\r\n//       const video = webcamRef.current.video;\r\n//       const imageSrc = webcamRef.current.getScreenshot();\r\n\r\n//       // Websocket\r\n//       var socket = new WebSocket(\"ws://localhost:8000\");\r\n//       var apiCall = {\r\n//         event: \"localhost:subscribe\",\r\n//         data: { image: imageSrc },\r\n//       };\r\n\r\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n//       socket.onmessage = function (event) {\r\n//         var pred_log = JSON.parse(event.data);\r\n//         if (!pred_log.error) {\r\n//           // Extract emotions and predictions\r\n//           const predictions = pred_log[\"predictions\"];\r\n//           const emotions = Object.keys(predictions);\r\n//           const values = emotions.map(emotion => predictions[emotion] * 100);\r\n\r\n//           // Find the highest emotion\r\n//           const maxIndex = values.indexOf(Math.max(...values));\r\n//           const emotion = emotions[maxIndex];\r\n//           const percentage = Math.round(values[maxIndex]);\r\n\r\n//           // Set the final emotion and percentage\r\n//           setFinalEmotion(emotion);\r\n//           setFinalPercentage(percentage);\r\n//         }\r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(detect, 1000); // Detect emotions every second\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Webcam\r\n//         ref={webcamRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n\r\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n//         <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\r\n//            Emotion : {finalEmotion} ({finalPercentage}%)\r\n//         </label>\r\n//         <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\r\n//           {finalPercentage}%\r\n//         </progress>\r\n//         <br /><br />\r\n\r\n//         <input\r\n//           id=\"emotion_text\"\r\n//           name=\"emotion_text\"\r\n//           value={finalEmotion}\r\n//           style={{\r\n//             width: 200,\r\n//             height: 50,\r\n//             fontSize: \"30px\",\r\n//             textAlign: \"center\",\r\n//           }}\r\n//           readOnly\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}