{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\atiqu\\\\OneDrive\\\\Desktop\\\\project_faceDetection\\\\emotion-recognition\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport logo from './logo.svg';\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport { drawMesh } from \"./utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const blazeface = require('@tensorflow-models/blazeface'); //  Load blazeface\n\n\n  const runFaceDetectorModel = async () => {\n    const model = await blazeface.load();\n    console.log(\"FaceDetection Model is Loaded..\");\n    setInterval(() => {\n      detect(model);\n    }, 100);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n\n      const face = await net.estimateFaces(video); //console.log(face);\n      // Websocket\n\n      var socket = new WebSocket('ws://localhost:8000');\n      var imageSrc = webcamRef.current.getScreenshot();\n      var apiCall = {\n        event: \"localhost:subscribe\",\n        data: {\n          image: imageSrc\n        }\n      };\n\n      socket.onopen = () => socket.send(JSON.stringify(apiCall));\n\n      socket.onmessage = function (event) {\n        var pred_log = JSON.parse(event.data);\n        document.getElementById(\"Angry\").value = Math.round(pred_log['predictions']['angry'] * 100);\n        document.getElementById(\"Neutral\").value = Math.round(pred_log['predictions']['neutral'] * 100);\n        document.getElementById(\"Happy\").value = Math.round(pred_log['predictions']['happy'] * 100);\n        document.getElementById(\"Fear\").value = Math.round(pred_log['predictions']['fear'] * 100);\n        document.getElementById(\"Surprise\").value = Math.round(pred_log['predictions']['surprise'] * 100);\n        document.getElementById(\"Sad\").value = Math.round(pred_log['predictions']['sad'] * 100);\n        document.getElementById(\"Disgust\").value = Math.round(pred_log['predictions']['disgust'] * 100);\n        document.getElementById(\"emotion_text\").value = pred_log['emotion']; // Get canvas context\n\n        const ctx = canvasRef.current.getContext(\"2d\");\n        requestAnimationFrame(() => {\n          drawMesh(face, pred_log, ctx);\n        });\n      };\n    }\n  };\n\n  useEffect(() => {\n    runFaceDetectorModel();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 600,\n        top: 20,\n        textAlign: \"center\",\n        zindex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 600,\n        top: 20,\n        textAlign: \"center\",\n        zindex: 9,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          bottom: 10,\n          left: 0,\n          right: 0,\n          width: 150,\n          height: 150\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Prediction\",\n        style: {\n          position: \"absolute\",\n          right: 100,\n          width: 500,\n          top: 60\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Angry\",\n          style: {\n            color: 'red'\n          },\n          children: \"Angry \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Angry\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Neutral\",\n          style: {\n            color: 'lightgreen'\n          },\n          children: \"Neutral \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Neutral\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Happy\",\n          style: {\n            color: 'orange'\n          },\n          children: \"Happy \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Happy\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Fear\",\n          style: {\n            color: 'lightblue'\n          },\n          children: \"Fear \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Fear\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Surprise\",\n          style: {\n            color: 'yellow'\n          },\n          children: \"Surprised \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Surprise\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Sad\",\n          style: {\n            color: 'gray'\n          },\n          children: \"Sad \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Sad\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"Disgust\",\n          style: {\n            color: 'pink'\n          },\n          children: \"Disgusted \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n          id: \"Disgust\",\n          value: \"0\",\n          max: \"100\",\n          children: \"10%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"emotion_text\",\n        name: \"emotion_text\",\n        vale: \"Neutral\",\n        style: {\n          position: \"absolute\",\n          width: 200,\n          height: 50,\n          bottom: 60,\n          left: 300,\n          \"font-size\": \"30px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = App;\nexport default App; // option one \n// import React, { useRef, useEffect } from \"react\";\n// import \"./App.css\";\n// import Webcam from \"react-webcam\";\n// function App() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   const detect = async () => {\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null &&\n//       webcamRef.current.video.readyState === 4\n//     ) {\n//       // Capture the current frame from the webcam\n//       const video = webcamRef.current.video;\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Websocket\n//       var socket = new WebSocket(\"ws://localhost:8000\");\n//       var apiCall = {\n//         event: \"localhost:subscribe\",\n//         data: { image: imageSrc },\n//       };\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\n//       socket.onmessage = function (event) {\n//         var pred_log = JSON.parse(event.data);\n//         if (!pred_log.error) {\n//           document.getElementById(\"Angry\").value = Math.round(\n//             pred_log[\"predictions\"][\"Angry\"] * 100\n//           );\n//           document.getElementById(\"Neutral\").value = Math.round(\n//             pred_log[\"predictions\"][\"Neutral\"] * 100\n//           );\n//           document.getElementById(\"Happy\").value = Math.round(\n//             pred_log[\"predictions\"][\"Happy\"] * 100\n//           );\n//           document.getElementById(\"Fear\").value = Math.round(\n//             pred_log[\"predictions\"][\"Fear\"] * 100\n//           );\n//           document.getElementById(\"Surprise\").value = Math.round(\n//             pred_log[\"predictions\"][\"Surprise\"] * 100\n//           );\n//           document.getElementById(\"Sad\").value = Math.round(\n//             pred_log[\"predictions\"][\"Sad\"] * 100\n//           );\n//           document.getElementById(\"Disgust\").value = Math.round(\n//             pred_log[\"predictions\"][\"Disgust\"] * 100\n//           );\n//           document.getElementById(\"emotion_text\").value = pred_log[\"emotion\"];\n//         }\n//       };\n//     }\n//   };\n//   useEffect(() => {\n//     setInterval(detect, 1000); // Detect emotions every second\n//   }, []);\n//   return (\n//     <div className=\"App\">\n//       <Webcam\n//         ref={webcamRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <canvas\n//         ref={canvasRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\n//         <label htmlFor=\"Angry\" style={{ color: \"red\" }}>Angry </label>\n//         <progress id=\"Angry\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Neutral\" style={{ color: \"lightgreen\" }}>Neutral </label>\n//         <progress id=\"Neutral\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Happy\" style={{ color: \"orange\" }}>Happy </label>\n//         <progress id=\"Happy\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Fear\" style={{ color: \"lightblue\" }}>Fear </label>\n//         <progress id=\"Fear\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Surprise\" style={{ color: \"yellow\" }}>Surprise </label>\n//         <progress id=\"Surprise\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Sad\" style={{ color: \"gray\" }}>Sad </label>\n//         <progress id=\"Sad\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <label htmlFor=\"Disgust\" style={{ color: \"pink\" }}>Disgust </label>\n//         <progress id=\"Disgust\" value=\"0\" max=\"100\">10%</progress>\n//         <br /><br />\n//         <input id=\"emotion_text\" name=\"emotion_text\" value=\"Neutral\" style={{ width: 200, height: 50, fontSize: \"30px\" }} />\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n// option two \n// import React, { useRef, useEffect, useState } from \"react\";\n// import \"./App.css\";\n// import Webcam from \"react-webcam\";\n// function App() {\n//   const webcamRef = useRef(null);\n//   const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\n//   const [finalPercentage, setFinalPercentage] = useState(0);\n//   const detect = async () => {\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null &&\n//       webcamRef.current.video.readyState === 4\n//     ) {\n//       // Capture the current frame from the webcam\n//       const video = webcamRef.current.video;\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Websocket\n//       var socket = new WebSocket(\"ws://localhost:8000\");\n//       var apiCall = {\n//         event: \"localhost:subscribe\",\n//         data: { image: imageSrc },\n//       };\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\n//       socket.onmessage = function (event) {\n//         var pred_log = JSON.parse(event.data);\n//         if (!pred_log.error) {\n//           // Extract emotions and predictions\n//           const predictions = pred_log[\"predictions\"];\n//           const emotions = Object.keys(predictions);\n//           const values = emotions.map(emotion => predictions[emotion] * 100);\n//           // Find the highest emotion\n//           const maxIndex = values.indexOf(Math.max(...values));\n//           const emotion = emotions[maxIndex];\n//           const percentage = Math.round(values[maxIndex]);\n//           // Set the final emotion and percentage\n//           setFinalEmotion(emotion);\n//           setFinalPercentage(percentage);\n//         }\n//       };\n//     }\n//   };\n//   useEffect(() => {\n//     const interval = setInterval(detect, 1000); // Detect emotions every second\n//     return () => clearInterval(interval);\n//   }, []);\n//   return (\n//     <div className=\"App\">\n//       <Webcam\n//         ref={webcamRef}\n//         style={{\n//           position: \"absolute\",\n//           marginLeft: \"auto\",\n//           marginRight: \"auto\",\n//           left: 0,\n//           right: 600,\n//           top: 20,\n//           textAlign: \"center\",\n//           zIndex: 9,\n//           width: 640,\n//           height: 480,\n//         }}\n//       />\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\n//         <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\n//            Emotion : {finalEmotion} ({finalPercentage}%)\n//         </label>\n//         <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\n//           {finalPercentage}%\n//         </progress>\n//         <br /><br />\n//         <input\n//           id=\"emotion_text\"\n//           name=\"emotion_text\"\n//           value={finalEmotion}\n//           style={{\n//             width: 200,\n//             height: 50,\n//             fontSize: \"30px\",\n//             textAlign: \"center\",\n//           }}\n//           readOnly\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/atiqu/OneDrive/Desktop/project_faceDetection/emotion-recognition/src/App.js"],"names":["React","useRef","useEffect","logo","tf","Webcam","drawMesh","App","webcamRef","canvasRef","blazeface","require","runFaceDetectorModel","model","load","console","log","setInterval","detect","net","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","socket","WebSocket","imageSrc","getScreenshot","apiCall","event","data","image","onopen","send","JSON","stringify","onmessage","pred_log","parse","document","getElementById","value","Math","round","ctx","getContext","requestAnimationFrame","position","marginLeft","marginRight","left","right","top","textAlign","zindex","bottom","color"],"mappings":"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":["import React, { useRef, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport logo from './logo.svg';\r\n\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport { drawMesh } from \"./utilities\";\r\n\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const blazeface = require('@tensorflow-models/blazeface')\r\n\r\n  //  Load blazeface\r\n  const runFaceDetectorModel = async () => {\r\n\r\n    const model = await blazeface.load()\r\n    console.log(\"FaceDetection Model is Loaded..\") \r\n    setInterval(() => {\r\n      detect(model);\r\n    }, 100);\r\n \r\n  }\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n\r\n      // Make Detections\r\n      const face = await net.estimateFaces(video);\r\n      //console.log(face);\r\n\r\n      // Websocket\r\n      var socket = new WebSocket('ws://localhost:8000')\r\n      var imageSrc = webcamRef.current.getScreenshot()\r\n      var apiCall = {\r\n        event: \"localhost:subscribe\",\r\n        data: { \r\n          image: imageSrc\r\n        },\r\n      };\r\n      socket.onopen = () => socket.send(JSON.stringify(apiCall))\r\n      socket.onmessage = function(event) {\r\n        var pred_log = JSON.parse(event.data)\r\n        document.getElementById(\"Angry\").value = Math.round(pred_log['predictions']['angry']*100)\r\n        document.getElementById(\"Neutral\").value = Math.round(pred_log['predictions']['neutral']*100)\r\n        document.getElementById(\"Happy\").value = Math.round(pred_log['predictions']['happy']*100)\r\n        document.getElementById(\"Fear\").value = Math.round(pred_log['predictions']['fear']*100)\r\n        document.getElementById(\"Surprise\").value = Math.round(pred_log['predictions']['surprise']*100)\r\n        document.getElementById(\"Sad\").value = Math.round(pred_log['predictions']['sad']*100)\r\n        document.getElementById(\"Disgust\").value = Math.round(pred_log['predictions']['disgust']*100)\r\n\r\n        document.getElementById(\"emotion_text\").value = pred_log['emotion']\r\n\r\n        // Get canvas context\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n        requestAnimationFrame(()=>{drawMesh(face, pred_log, ctx)});\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runFaceDetectorModel()}, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Webcam\r\n          ref={webcamRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 600,\r\n            top:20,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 600,\r\n            top:20,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      <header className=\"App-header\">\r\n        <img src={logo} \r\n        className=\"App-logo\" \r\n        alt=\"logo\"\r\n        style={{\r\n          position: \"absolute\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          bottom:10,\r\n          left: 0,\r\n          right: 0,\r\n          width: 150,\r\n          height: 150,\r\n        }}\r\n        />   \r\n        <div className=\"Prediction\" style={{\r\n          position:\"absolute\",\r\n          right:100,\r\n          width:500,\r\n          top: 60\r\n        }}>\r\n          <label forhtml=\"Angry\" style={{color:'red'}}>Angry </label>\r\n          <progress id=\"Angry\" value=\"0\" max = \"100\" >10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Neutral\" style={{color:'lightgreen'}}>Neutral </label>\r\n          <progress id=\"Neutral\" value=\"0\" max = \"100\">10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Happy\" style={{color:'orange'}}>Happy </label>\r\n          <progress id=\"Happy\" value=\"0\" max = \"100\" >10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Fear\" style={{color:'lightblue'}}>Fear </label>\r\n          <progress id=\"Fear\" value=\"0\" max = \"100\" >10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Surprise\" style={{color:'yellow'}}>Surprised </label>\r\n          <progress id=\"Surprise\" value=\"0\" max = \"100\" >10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Sad\" style={{color:'gray'}} >Sad </label>\r\n          <progress id=\"Sad\" value=\"0\" max = \"100\" >10%</progress>\r\n          <br></br>\r\n          <br></br>\r\n          <label forhtml=\"Disgust\" style={{color:'pink'}} >Disgusted </label>\r\n          <progress id=\"Disgust\" value=\"0\" max = \"100\" >10%</progress>\r\n        </div>\r\n        <input id=\"emotion_text\" name=\"emotion_text\" vale=\"Neutral\"\r\n               style={{\r\n                 position:\"absolute\",\r\n                 width:200,\r\n                 height:50,\r\n                 bottom:60,\r\n                 left:300,\r\n                 \"font-size\": \"30px\",\r\n               }}></input>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// option one \r\n\r\n\r\n// import React, { useRef, useEffect } from \"react\";\r\n// import \"./App.css\";\r\n// import Webcam from \"react-webcam\";\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n\r\n//   const detect = async () => {\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Capture the current frame from the webcam\r\n//       const video = webcamRef.current.video;\r\n//       const imageSrc = webcamRef.current.getScreenshot();\r\n\r\n//       // Websocket\r\n//       var socket = new WebSocket(\"ws://localhost:8000\");\r\n//       var apiCall = {\r\n//         event: \"localhost:subscribe\",\r\n//         data: { image: imageSrc },\r\n//       };\r\n\r\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n//       socket.onmessage = function (event) {\r\n//         var pred_log = JSON.parse(event.data);\r\n//         if (!pred_log.error) {\r\n//           document.getElementById(\"Angry\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Angry\"] * 100\r\n//           );\r\n//           document.getElementById(\"Neutral\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Neutral\"] * 100\r\n//           );\r\n//           document.getElementById(\"Happy\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Happy\"] * 100\r\n//           );\r\n//           document.getElementById(\"Fear\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Fear\"] * 100\r\n//           );\r\n//           document.getElementById(\"Surprise\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Surprise\"] * 100\r\n//           );\r\n//           document.getElementById(\"Sad\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Sad\"] * 100\r\n//           );\r\n//           document.getElementById(\"Disgust\").value = Math.round(\r\n//             pred_log[\"predictions\"][\"Disgust\"] * 100\r\n//           );\r\n\r\n//           document.getElementById(\"emotion_text\").value = pred_log[\"emotion\"];\r\n//         }\r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     setInterval(detect, 1000); // Detect emotions every second\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Webcam\r\n//         ref={webcamRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n\r\n//       <canvas\r\n//         ref={canvasRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n//         <label htmlFor=\"Angry\" style={{ color: \"red\" }}>Angry </label>\r\n//         <progress id=\"Angry\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Neutral\" style={{ color: \"lightgreen\" }}>Neutral </label>\r\n//         <progress id=\"Neutral\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Happy\" style={{ color: \"orange\" }}>Happy </label>\r\n//         <progress id=\"Happy\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Fear\" style={{ color: \"lightblue\" }}>Fear </label>\r\n//         <progress id=\"Fear\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Surprise\" style={{ color: \"yellow\" }}>Surprise </label>\r\n//         <progress id=\"Surprise\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Sad\" style={{ color: \"gray\" }}>Sad </label>\r\n//         <progress id=\"Sad\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <label htmlFor=\"Disgust\" style={{ color: \"pink\" }}>Disgust </label>\r\n//         <progress id=\"Disgust\" value=\"0\" max=\"100\">10%</progress>\r\n//         <br /><br />\r\n//         <input id=\"emotion_text\" name=\"emotion_text\" value=\"Neutral\" style={{ width: 200, height: 50, fontSize: \"30px\" }} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// option two \r\n// import React, { useRef, useEffect, useState } from \"react\";\r\n// import \"./App.css\";\r\n// import Webcam from \"react-webcam\";\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const [finalEmotion, setFinalEmotion] = useState(\"Neutral\");\r\n//   const [finalPercentage, setFinalPercentage] = useState(0);\r\n\r\n//   const detect = async () => {\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Capture the current frame from the webcam\r\n//       const video = webcamRef.current.video;\r\n//       const imageSrc = webcamRef.current.getScreenshot();\r\n\r\n//       // Websocket\r\n//       var socket = new WebSocket(\"ws://localhost:8000\");\r\n//       var apiCall = {\r\n//         event: \"localhost:subscribe\",\r\n//         data: { image: imageSrc },\r\n//       };\r\n\r\n//       socket.onopen = () => socket.send(JSON.stringify(apiCall));\r\n//       socket.onmessage = function (event) {\r\n//         var pred_log = JSON.parse(event.data);\r\n//         if (!pred_log.error) {\r\n//           // Extract emotions and predictions\r\n//           const predictions = pred_log[\"predictions\"];\r\n//           const emotions = Object.keys(predictions);\r\n//           const values = emotions.map(emotion => predictions[emotion] * 100);\r\n\r\n//           // Find the highest emotion\r\n//           const maxIndex = values.indexOf(Math.max(...values));\r\n//           const emotion = emotions[maxIndex];\r\n//           const percentage = Math.round(values[maxIndex]);\r\n\r\n//           // Set the final emotion and percentage\r\n//           setFinalEmotion(emotion);\r\n//           setFinalPercentage(percentage);\r\n//         }\r\n//       };\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(detect, 1000); // Detect emotions every second\r\n//     return () => clearInterval(interval);\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Webcam\r\n//         ref={webcamRef}\r\n//         style={{\r\n//           position: \"absolute\",\r\n//           marginLeft: \"auto\",\r\n//           marginRight: \"auto\",\r\n//           left: 0,\r\n//           right: 600,\r\n//           top: 20,\r\n//           textAlign: \"center\",\r\n//           zIndex: 9,\r\n//           width: 640,\r\n//           height: 480,\r\n//         }}\r\n//       />\r\n\r\n//       <div className=\"Prediction\" style={{ position: \"absolute\", right: 100, width: 500, top: 60 }}>\r\n//         <label htmlFor=\"finalEmotionProgress\" style={{ color: \"black\" }}>\r\n//            Emotion : {finalEmotion} ({finalPercentage}%)\r\n//         </label>\r\n//         <progress id=\"finalEmotionProgress\" value={finalPercentage} max=\"100\">\r\n//           {finalPercentage}%\r\n//         </progress>\r\n//         <br /><br />\r\n\r\n//         <input\r\n//           id=\"emotion_text\"\r\n//           name=\"emotion_text\"\r\n//           value={finalEmotion}\r\n//           style={{\r\n//             width: 200,\r\n//             height: 50,\r\n//             fontSize: \"30px\",\r\n//             textAlign: \"center\",\r\n//           }}\r\n//           readOnly\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}