{"ast":null,"code":"// Drawing Mesh\nexport const drawMesh = (predictions, emotions, ctx) => {\n  var emo = emotions['emotion'];\n\n  if (predictions.length > 0) {\n    for (let i = 0; i < predictions.length; i++) {\n      const start = predictions[i].topLeft;\n      const end = predictions[i].bottomRight;\n      const size = [end[0] - start[0], end[1] - start[1]]; // Render a rectangle over each detected face.\n\n      ctx.beginPath();\n      ctx.lineWidth = \"3\";\n\n      if (emo === 'angry') {\n        ctx.fillStyle = 'red';\n      } else if (emo === 'neutral') {\n        ctx.fillStyle = 'green';\n      } else if (emo === 'happy') {\n        ctx.fillStyle = 'orange';\n      } else if (emo === 'fear') {\n        ctx.fillStyle = 'blue';\n      } else if (emo === 'surprise') {\n        ctx.fillStyle = 'yellow';\n      } else if (emo === 'sad') {\n        ctx.fillStyle = 'gray';\n      } else {\n        ctx.fillStyle = 'pink';\n      }\n\n      ctx.globalAlpha = 0.2;\n      ctx.rect(start[0], start[1], size[0], size[1]);\n      ctx.fillRect(start[0], start[1], size[0], size[1]);\n      ctx.stroke();\n      ctx.font = \"20px Georgia\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(emo, start[0] + 40, start[1] + 15);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/atiqu/OneDrive/Desktop/project_faceDetection/emotion-recognition/src/utilities.js"],"names":["drawMesh","predictions","emotions","ctx","emo","length","i","start","topLeft","end","bottomRight","size","beginPath","lineWidth","fillStyle","globalAlpha","rect","fillRect","stroke","font","textAlign","textBaseline","fillText"],"mappings":"AAAA;AACA,OAAO,MAAMA,QAAQ,GAAG,CAACC,WAAD,EAAcC,QAAd,EAAwBC,GAAxB,KAAgC;AACxD,MAAIC,GAAG,GAAGF,QAAQ,CAAC,SAAD,CAAlB;;AACA,MAAID,WAAW,CAACI,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,WAAW,CAACI,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AACzC,YAAMC,KAAK,GAAGN,WAAW,CAACK,CAAD,CAAX,CAAeE,OAA7B;AACA,YAAMC,GAAG,GAAGR,WAAW,CAACK,CAAD,CAAX,CAAeI,WAA3B;AACA,YAAMC,IAAI,GAAG,CAACF,GAAG,CAAC,CAAD,CAAH,GAASF,KAAK,CAAC,CAAD,CAAf,EAAoBE,GAAG,CAAC,CAAD,CAAH,GAASF,KAAK,CAAC,CAAD,CAAlC,CAAb,CAHyC,CAKzC;;AACAJ,MAAAA,GAAG,CAACS,SAAJ;AACAT,MAAAA,GAAG,CAACU,SAAJ,GAAgB,GAAhB;;AACA,UAAIT,GAAG,KAAG,OAAV,EAAkB;AAChBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,KAAhB;AACD,OAFD,MAGK,IAAIV,GAAG,KAAG,SAAV,EAAoB;AACvBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,OAAhB;AACD,OAFI,MAGA,IAAIV,GAAG,KAAG,OAAV,EAAkB;AACrBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,QAAhB;AACD,OAFI,MAGA,IAAIV,GAAG,KAAG,MAAV,EAAiB;AACpBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,MAAhB;AACD,OAFI,MAGA,IAAIV,GAAG,KAAG,UAAV,EAAqB;AACxBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,QAAhB;AACD,OAFI,MAGA,IAAIV,GAAG,KAAG,KAAV,EAAgB;AACnBD,QAAAA,GAAG,CAACW,SAAJ,GAAgB,MAAhB;AACD,OAFI,MAGA;AACHX,QAAAA,GAAG,CAACW,SAAJ,GAAgB,MAAhB;AACD;;AACDX,MAAAA,GAAG,CAACY,WAAJ,GAAkB,GAAlB;AACAZ,MAAAA,GAAG,CAACa,IAAJ,CAAST,KAAK,CAAC,CAAD,CAAd,EAAmBA,KAAK,CAAC,CAAD,CAAxB,EAA6BI,IAAI,CAAC,CAAD,CAAjC,EAAsCA,IAAI,CAAC,CAAD,CAA1C;AACAR,MAAAA,GAAG,CAACc,QAAJ,CAAaV,KAAK,CAAC,CAAD,CAAlB,EAAuBA,KAAK,CAAC,CAAD,CAA5B,EAAiCI,IAAI,CAAC,CAAD,CAArC,EAA0CA,IAAI,CAAC,CAAD,CAA9C;AACAR,MAAAA,GAAG,CAACe,MAAJ;AACAf,MAAAA,GAAG,CAACgB,IAAJ,GAAS,cAAT;AACAhB,MAAAA,GAAG,CAACiB,SAAJ,GAAc,QAAd;AACAjB,MAAAA,GAAG,CAACkB,YAAJ,GAAmB,QAAnB;AACAlB,MAAAA,GAAG,CAACW,SAAJ,GAAgB,SAAhB;AACAX,MAAAA,GAAG,CAACmB,QAAJ,CAAalB,GAAb,EAAkBG,KAAK,CAAC,CAAD,CAAL,GAAS,EAA3B,EAA+BA,KAAK,CAAC,CAAD,CAAL,GAAS,EAAxC;AACD;AACJ;AACF,CA3CM","sourcesContent":["// Drawing Mesh\r\nexport const drawMesh = (predictions, emotions, ctx) => {\r\nvar emo = emotions['emotion']\r\nif (predictions.length > 0) {\r\n    for (let i = 0; i < predictions.length; i++) {\r\n        const start = predictions[i].topLeft;\r\n        const end = predictions[i].bottomRight;\r\n        const size = [end[0] - start[0], end[1] - start[1]];\r\n  \r\n        // Render a rectangle over each detected face.\r\n        ctx.beginPath();\r\n        ctx.lineWidth = \"3\";\r\n        if (emo==='angry'){\r\n          ctx.fillStyle = 'red';\r\n        }\r\n        else if (emo==='neutral'){\r\n          ctx.fillStyle = 'green';\r\n        }\r\n        else if (emo==='happy'){\r\n          ctx.fillStyle = 'orange';\r\n        }\r\n        else if (emo==='fear'){\r\n          ctx.fillStyle = 'blue';\r\n        }\r\n        else if (emo==='surprise'){\r\n          ctx.fillStyle = 'yellow';\r\n        }\r\n        else if (emo==='sad'){\r\n          ctx.fillStyle = 'gray';\r\n        }\r\n        else {\r\n          ctx.fillStyle = 'pink';\r\n        }\r\n        ctx.globalAlpha = 0.2;\r\n        ctx.rect(start[0], start[1], size[0], size[1]);\r\n        ctx.fillRect(start[0], start[1], size[0], size[1]);\r\n        ctx.stroke();\r\n        ctx.font=\"20px Georgia\";\r\n        ctx.textAlign=\"center\"; \r\n        ctx.textBaseline = \"middle\";\r\n        ctx.fillStyle = \"#000000\";\r\n        ctx.fillText(emo, start[0]+40, start[1]+15);\r\n      }\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}